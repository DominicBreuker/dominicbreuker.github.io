<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web on text/plain</title>
    <link>https://dominicbreuker.com/categories/web/</link>
    <description>Recent content in web on text/plain</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 20 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://dominicbreuker.com/categories/web/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A Tale of Two XSS in the Rails HTML Sanitizer</title>
      <link>https://dominicbreuker.com/post/a_tale_of_two_xss_in_rails_html_sanitizer/</link>
      <pubDate>Tue, 20 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dominicbreuker.com/post/a_tale_of_two_xss_in_rails_html_sanitizer/</guid>
      <description>A while ago I was writing an application based on the Rails framework which returned sanitized user input. Its purpose was to build a PoC for an XSS vulnerability in the Rails HTML sanitizer (CVE-2022-32209, which appeared in June 2022). The following is a short write-up of that endeavour and how it turned into the discovery of two additional CVEs.
I start with a discussion of the original CVE-2022-32209, proceed with an investigation of the fix and how it turned out to be incomplete (CVE-2022-23520), explain how that motivated additional fuzzing which uncovered additional working attack payloads (CVE-2022-23519) and conclude with a brief outline of the fix (entirely designed and implemented by flavorjones).</description>
    </item>
    
    <item>
      <title>Filters and Bypasses - Rare IPv4 Formats for SSRF</title>
      <link>https://dominicbreuker.com/post/filters_bypasses_rare_ipv4_formats_for_ssrf/</link>
      <pubDate>Fri, 16 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://dominicbreuker.com/post/filters_bypasses_rare_ipv4_formats_for_ssrf/</guid>
      <description>Many applications these days do network requests on behalf of their users. For example, it is often possible to define webhooks, where users can specify URLs to which a server shall send HTTP requests when certain events occur. Other applications may allow uploading images by URL or they may generate PDFs from HTML rendered server-side, which could contain URLs (see here). In all these examples, users provide input to specify the destinations of server-side network requests.</description>
    </item>
    
  </channel>
</rss>
