<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DLL on text/plain</title>
    <link>https://dominicbreuker.com/tags/dll/</link>
    <description>Recent content in DLL on text/plain</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Thu, 23 Mar 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://dominicbreuker.com/tags/dll/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Learning Sliver C2 (12) - Extensions</title>
      <link>https://dominicbreuker.com/post/learning_sliver_c2_12_extensions/</link>
      <pubDate>Thu, 23 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://dominicbreuker.com/post/learning_sliver_c2_12_extensions/</guid>
      <description>Sliver C2 This post is part of a tutorial blog post series on Sliver C2 (used here in version v1.5.35 with a few bugfixes on top, commit 749f71d. For a series overview: click here.
Introduction In posts 9 to 11 we discussed what I originally advertised as the three ways to run 3rd party tools. Time to reflect on what we can do with that. Its possible to run .NET code with execute-assembly and we can do that either by spawning and injecting into a sacrificial process (suspicious and detectable) or we run them --in-process (harder to detect, but seemed to be less stable and killed a few of my beacons).</description>
    </item>
    
    <item>
      <title>Learning Sliver C2 (11) - SpawnDLL</title>
      <link>https://dominicbreuker.com/post/learning_sliver_c2_11_spawndll/</link>
      <pubDate>Fri, 10 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://dominicbreuker.com/post/learning_sliver_c2_11_spawndll/</guid>
      <description>Sliver C2 This post is part of a tutorial blog post series on Sliver C2 (used here in version v1.5.34). For an overview: click here.
Introduction With the execute-assembly (post 9) and sideload (post 10) commands we are able to run 3rd part tools written as .NET or native PE executables. This post now is about the command spawndll. At first glance it looks very similar to sideload since both commands execute Windows DLLs.</description>
    </item>
    
    <item>
      <title>Learning Sliver C2 (10) - Sideload</title>
      <link>https://dominicbreuker.com/post/learning_sliver_c2_10_sideload/</link>
      <pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://dominicbreuker.com/post/learning_sliver_c2_10_sideload/</guid>
      <description>Sliver C2 This post is part of a tutorial blog post series on Sliver C2 (used here in version v1.5.30). For an overview: click here. As of March 6 2023, this post got a new bonus section to illustrate execution of Windows PE EXE files with sideload. The rest of the text was also updated, but only here and there.
Introduction The previous post 9 was about making a Windows implant run 3rd party tools.</description>
    </item>
    
  </channel>
</rss>
